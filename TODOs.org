- [ ] configure Eask to install pinned version
- [ ] add ~README.org~
- [ ] use ~org-hugo-default-section-directory~ to retrieve top-level section

Currently orgox hardcodes the top-level section to "posts".

* [2025-03-17 Mon]

In GitHub, I configured a custom domain instead of

    https://swinkels.github.io/notes-as-hugo-blog

This involved 2 things:

- In the management console of my domain provider I added a CNAME record from
  blog.journeythatcounts.nl to swinkels.github.io. note the ~.~ at the end of
  swinkels.github.io. Without it, it redirected to something like

      blog.journeythatcounts.nlswinkels.github.io

- With the right CNAME record, the blog was accessible at
  http://blog.journeythatcounts.nl. However, the DNS check at

      https://github.com/swinkels/notes-as-hugo-blog/settings/pages

  kept failing, with different error messages. For example, sometimes it says
  that I should configure the custom domain as a CNAME record. Other times it
  says that the DNS record could not be retrieved. This could be due to DNS
  caching, especially since the first CNAME record I added was incorrect. After
  about an hour, the DNS check passsed.

- When the DNS check were still failing, at some point the page at GitHub pages
  showed that is was generating a TLS certificate and somewhat later, it said
  that the "Certificate already exists for blog.journeythatcounts.nl and is
  usable". I checked the "Enforce HTTPS" check box and indeed, the site is
  available through HTTPS.

- Although the GitHub docs on [[https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain][configuring a subdomain]] state that you need a
  CNAME file in my repo, its [[https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages][troubleshooting page]] states that it isn't necessary
  when you're publishing from a custom GitHub Actions workflow, which I am. I
  had added a CNAME file to the repo, but I removed it after I read this.

This also fixed the next issue:

- [X] fix links to note assets

* [2025-03-15 Sat]

I created a repo to store the Hugo site and pushed it to GitHub, to
[[https://github.com/swinkels/notes-as-hugo-blog][notes-as-hugo-blog]]. I configured a GitHub workflow to publish an up-to-date
version to GitHub pages on each commit[fn:3]. You can visit it at

    https://swinkels.github.io/notes-as-hugo-blog

I noticed that the links to the note assets are broken. This is because these
links assume that the assets are at

    https://swinkels.github.io/

so without the repository name. I can either add support in orgox for such a
top-level directory or use my custom domain, blog.journeythatcounts.nl. I have a
slight preference for the latter as it would allow me to retire the VPS that
currently hosts blog.journeythatcounts.nl.

* [2025-03-14 Fri]

- [X] support use of images
- [X] local links to other notes are extracted as-is

* [2025-02-04 Tue]

- [X] post 20231217.org places property drawer at the wrong headline

* [2025-01-25 Sat]

- [ ] support links to additional files

* [2025-01-24 Fri]

- [ ] support links to additional files

I implemented the functions to sync the directory of local files to the Hugo
static subdirectory for external files.

* [2025-01-21 Tue]

- [X] use sections to create URLs with ~YYYY/MM/DD/<title>~

* [2025-01-20 Mon]

- [X] add unit tests

I added a single unit test that tests the creation of an ox-hugo post from a
note. This sets up the required test scaffolding and tests one of the main
functions. This is enough for now.

* [2025-01-19 Sun]

In general, each of my notes consists of an org file org and, in case a note
links to a local file, a directory at the same level as the org file with these
local files. Here the org file and directory are named after the date of the
note, for example ~20240724.org~ and ~20240724/~. In general, I use the
following format for these local links:
#+begin_example
[[file:20240724/emacs-29.2.scm][here]]
#+end_example

ox-hugo correctly exports this link to
#+begin_example
[here](20240724/emacs-29.2.scm)
#+end_example
However, ox-hugo does not automatically export the local files and you end up
with a broken link.

ox-hugo does support the export of local files but only for files with a certain
extension[fn:1]. Although you can configure the list of supported extensions is
configurable, I did not want to be limit myself to an ever growing list. So
after some trial and error I settled for the following approach. First, in the
~.ox-hugo.org~ file let the link refer to the root of the exported site, for
example
#+begin_example
[[file:/20240724/emacs-29.2.scm][here]]
#+end_example
Note the extra ~/~ at the start of the link. Then, copy the folder with the
local files to directory ~static/ox-hugo~ in the root of the Hugo site
repository[fn:2]. So for a local folder ~20240724~, copy it to
#+begin_example
<Hugo site repository root>/static/ox-hugo/20240724
#+end_example

** Caveats

The first caveat took me quite some time: org-hugo only seems to support named
links to local files. I started out with a link like this
#+begin_example
[[20240724/emacs-29.2.scm]]
#+end_example
and then org-hugo assumes it's a link to the headline ~20240724/emacs-29.2.scm~
in the same org-file. It aborts the export if no such headline exists.

I also tried the following variations on the link above and they all didn't
work:
#+begin_example
[[/20240724/emacs-29.2.scm]]
[[file:20240724/emacs-29.2.scm]]
[[file:/20240724/emacs-29.2.scm]]
#+end_example
org-hugo exports them as
#+begin_example
</20240724/emacs-29.2.scm>
<20240724/emacs-29.2.scm>
</20240724/emacs-29.2.scm>
#+end_example
In Markdown, these are just text, not links.

Furthermore, links to local files do not work for links to org-mode files. For
example, org-hugo exports
#+begin_example
[[/20240724/hello.org][20240724/hello.org]]
#+end_example
as
#+begin_example
[20240324/hello.org]({{< relref "hello" >}})
#+end_example
This makes the Hugo site itself bork. I haven't looked into this but my gut
feeling tells me that org-hugo assumes that any org-file is another top-level
org-file.

Finally, links to local directories don't work. As a workaround, I can link to
the directory in my GitHub repo:

https://github.com/swinkels/notes/tree/main/2024/07/24/20240724

* Footnotes

[fn:1] The local files that org-hugo exports need to have an extension that is
specified by ~org-hugo-external-file-extensions-allowed-for-copying~, see the
ox-hugo documentation on [[https://ox-hugo.scripter.co/doc/image-links/][image links]] for details.

[fn:2] Here the name of the ~static~ subfolder is ~org-hugo~. The actual name is
configured through ~org-hugo-default-static-subdirectory-for-externals~.

[fn:3] I just followed the Hugo documentation [[https://gohugo.io/host-and-deploy/host-on-github-pages/][here]].
